---
title: "EpiSewer Review"
author: "Jose Palacio"
format:
  html:
    other-links:
      - text: EpiSewer Public Github Repository
        href: https://github.com/adrian-lison/EpiSewer
      - text: EpiSewer Documentation
        href: https://adrian-lison.github.io/EpiSewer/
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---

# Libraries

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: EpiSewer-libraries


library(MARSS)
library(tidyverse)
library(KFAS)
library(ggplot2)
library(astsa)
library(dplyr)
library(data.table)
library(tseries)
library(knitr)
library(latexpdf)
library(kableExtra)
library(forecast)
library(qcc)
library(ggnewscale)
library(remotes)
library(EpiSewer)
```

# Description of the data

The data consists of synthetic time series data based on the observations of SARS-CoV-2 concentrations in wastewater samples collected from the wastewater treatment plant (WWTP) in 69th Street at Houston, Texas, USA. The data includes the date of collection, the WWTP from which the sample was collected, the log10-transformed concentration of SARS-CoV-2 RNA copies per liter (log10cpl), and other relevant information.

The goal is to analyze the data using the EpiSewer package to estimate the dynamics of the SARS-CoV-2 outbreak in Houston based on the wastewater surveillance data.

The cases data is not available, so we will initialize an empty column for cases in the data.

# 1. Data Processing

The total viral load, $\pi_t$, is calculated as:

$$ \pi_t = C_t \times \text{flow}_t  $$

Where:

-   $\pi_t$: Total viral load (gc/day) on day $t$.

-   $C_t$: Viral concentration (gc/mL).

-   $\text{flow}_t$: Flow rate (mL/day).

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Data Processing

load("Data/synthetic_data")

# Filter the time series data post-burnin and arrange by date
# DEFINE PARAMETERS:
burnin <- 15  # Interesting Variance behavior 
date_burnin <- synthetic_data %>% 
  dplyr::select(date) %>% 
  nth(burnin) %>%
  pull(date)

# Filter the time series data post-burnin and arrange by date
ts_data <- synthetic_data %>%
  dplyr::filter(date > date_burnin) %>%
  arrange(date)

# Change flow from to mL/day
ts_data$flow <- ts_data$flow*1000

# Remove the log10 transformation and change to mL/day
ts_data$log10cpl <- (10^ts_data$log10cpl)*1000

# Change names to concentration
ts_data <- ts_data %>%
  mutate(concentration = log10cpl) %>%
  dplyr::select(-log10cpl)

wwtp_data <- ts_data

# Convert filtered data to data.table
ww_data <- data.table::setDT(wwtp_data)
  
# Select relevant columns and rename
ww_data <- ww_data[, .(date, concentration, flow)]

# Calculate total viral load (Ï€t) based on concentration and flow
ww_data[, total_viral_load := concentration * flow]
```

# 2. Initialize cases Column with NA Values

-   Adds a cases column and assigns NA values to 10% of rows to simulate missing data. This prepares the data to handle gaps in case data, modeling realistic missing data scenarios.

Comment: Although the package indicates that the cases column is optional, it is important to consider it for analyzing the virus spread.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Initialize Cases Column
# Initialize 'cases' with NA values (if relevant)
ww_data[sample(1:nrow(ww_data), 0.1 * nrow(ww_data)), cases := NA]
```

# 3. Interpolate Missing Flow Data Using locf

-   Interpolates missing flow data using the last observation carried forward (locf) method, which fills missing values with the last observed value. This ensures that the flow data is continuous and complete, which is essential for accurate modeling and forecasting.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Interpolate Missing Flow Data
# Interpolate missing flow data using 'locf'
ww_data <- ww_data[
    data.table::CJ(date = seq.Date(min(date), max(date), by = "day"), unique = TRUE),
    on = .(date)
  ]
data.table::setnafill(ww_data, type = "locf", cols = "flow")
```

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Remove Duplicates
# Remove duplicates based on date
ww_data <- ww_data[!duplicated(date), ]
```

# 5. Create EpiSewer Input List

-   Creates an input list for EpiSewer containing the wastewater measurements, flow data, and cases data. This prepares the data for modeling the dynamics of the disease outbreak in the city based on the wastewater surveillance data.

-   Organizes measurements, flows, and cases into a list (ww_sewer) required by the model. Organizing data this way aligns with the expected structure for EpiSewer input.

-Comment: Although the cases data is optional, the EpiSewer package still requires it to be included in the input list. If we have no data on cases, we can initialize the column with NA values as done in the previous step.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Create EpiSewer Input List

ww_sewer <- list(
    measurements = ww_data[, .(date, concentration)],
    flows = ww_data[, .(date, flow)],
    cases = ww_data[, .(date, cases)]
  )
```

# 6. Define the Measurement Model

Specifies the measurement model for concentrations and includes observed noise. We assume there is no limit of detection (LOD_none()), meaning all measurements are detectable.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Measurement Model

ww_measurements <- model_measurements(
    concentrations = concentrations_observe(measurements = ww_sewer$measurements),
    noise = noise_estimate(),
    LOD = LOD_none()
  )
```

## 7. Define the Sewage Model

-   Specifies the sewage model, including the observed flow data and the assumed residence distribution. The residence distribution represents the time it takes for wastewater to travel from the source to the sampling point. Virus remains in the wastewater system for one day before being eliminated.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Sewage Model

ww_sewage <- model_sewage(
    flows = flows_observe(flows = ww_sewer$flows),
    residence_dist = residence_dist_assume(residence_dist = c(1))
  )
```

# 8. Sampling Model

-   Specifies the sampling model, assuming no sample effects. The sampling process does not affect the observed data.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Sampling Model

ww_sampling <- model_sampling(
    sample_effects = sample_effects_none()
  )
```

# 9. Shedding Model

Expected Symptom Onsets ($\lambda_t$):

$\lambda_t$ represents the expected number of individuals with symptom onset on day $t$.

$$ \lambda_t = \sum_{s=0}^{L} I_{t-s} \, \tau^{\text{inc}}_s .$$ Where:

-   $\tau^{\text{inc}}$: Incubation period distribution with maximum duration $L$.

-   $I_{t-s}$: Number of infections occurring $s$ days before.

The incubation distribution adjusts the delay between infection and symptom onset.

Total Load Shed in Catchment ( $\omega_t$ ):

$$ \omega_t = \sum_{s=0}^{S} \lambda_{t-s} \, \mu^{\text{load}} \, \tau^{\text{shed}}_s$$

Where:

-   $\mu^{\text{load}}$: Average viral load per individual.

-   $\tau^{\text{shed}}$: Shedding distribution with maximum duration $S$.

-   $S$: Maximum number of days after symptom onset.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Shedding Model

ww_shedding <- model_shedding(
    shedding_dist = shedding_dist_assume(
      get_discrete_gamma(gamma_shape = 0.929639, 
                         gamma_scale = 7.241397, 
                         maxX = 30),
      shedding_reference = "symptom_onset"),
    incubation_dist = incubation_dist_assume(get_discrete_gamma(gamma_shape = 8.5, 
                                                                gamma_scale = 0.4, 
                                                                maxX = 10)),
    load_per_case = load_per_case_calibrate(cases = NULL, min_cases = 25), 
    load_variation = load_variation_estimate()
  )
```

The number of infections at time $t$, denoted $I_t$, follows a Poisson distribution:

$$
I_t | \iota_t \sim \text{Poisson}(\iota_t) 
$$

In Stan, this may be approximated by a Normal distribution:

$$ I_t | \iota_t \sim N(\iota_t, \iota_t). $$

Estimating $R_t$:

The effective reproduction number, $R_t$, is estimated using a random walk model. The random walk model assumes that the transmission rate changes gradually over time, reflecting the underlying dynamics of the outbreak.

$R_t < 1$: Indicates that the outbreak is under control and will eventually subside.

$R_t = 1$: Indicates that the outbreak is stable, with the number of new cases remaining constant over time.

$R_t > 1$: Indicates that the outbreak is growing, with the number of new cases increasing.

$R_t$ is estimated using a renewal equation:

$$ \iota_t = R_t \sum_{s=1}^{G} \tau^{\text{gen}}_s I_{t-s} $$

Where:

-   $\iota_t$: Expected new infections at time $t$.

-   $\tau^{\text{gen}}_s$: Generation time distribution, representing the probability of transmission $s$ days after infection.

-   $I_{t-s}$: Number of infections $s$ days prior.

-   $G$: Maximum number of days considered for transmission.

$R_t$ is modeled as a random walk to allow for temporal variability: $$
        R_t \sim R_{t-1} + \epsilon .
        $$

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Infections Model and R_t Estimation

ww_infections_rw <- model_infections(
  generation_dist = generation_dist_assume(
    get_discrete_gamma_shifted(gamma_mean = 3, 
                               gamma_sd = 2.4, 
                               maxX = 12)
    ),
  R = R_estimate_rw(),  # Use random walk instead of splines
  seeding = seeding_estimate_rw(),
  infection_noise = infection_noise_estimate()
)

ww_infections_spline <- model_infections(
  generation_dist = generation_dist_assume(
    get_discrete_gamma_shifted(gamma_mean = 3, 
                               gamma_sd = 2.4, 
                               maxX = 12)
    ),
  R = R_estimate_splines(),  # Use random walk instead of splines
  seeding = seeding_estimate_rw(),
  infection_noise = infection_noise_estimate()
)
```

# 11. Assumptions

The following are hard assumptions made in the model:

$\textbf{Generation Time Distribution}$ : Modeled with a shifted gamma distribution with a mean of 3 days, standard deviation of 2.4 days, and maximum of 12 days.

$$
G(t) \sim \text{Shifted Gamma}(\mu = 3, \sigma = 2.4, \text{ max} = 12)
$$

$\textbf{Shedding Distribution}$: Gamma distribution with shape = 0.929639, scale = 7.241397, and a maximum of 30 days from symptom onset.

$$
S(t) \sim \text{Gamma}(\text{shape} = 0.929639, \text{ scale} = 7.241397)
$$

$\textbf{Incubation Distribution}$: Gamma distribution with shape = 8.5, scale = 0.4, and a maximum incubation time of 10 days.

$$
I(t) \sim \text{Gamma}(\text{shape} = 8.5, \text{ scale} = 0.4)
$$

$\textbf{Limit of Detection (LOD)}$: Assumed as `LOD_none`, meaning all values are detectable.

$\textbf{Residence Time}$: Viral particles remain in the sewage system for 1 day.

$\textbf{No Clinical Case Data}$: Model operates based solely on wastewater data.

Comment: Notice that the model assumes that the minimum number of cases is 25. Therefore, although the cases column is initialized with NA values, the model requires a minimum number of cases to be present.

# 10. Forecast Model

-   Predicts up to 7 days into the future using posterior estimates of $R_t$ and other parameters.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Forecast Model

ww_forecast <- model_forecast(
    horizon = horizon_assume(horizon = 7)
  )
```

# 11. Fitting with MCMC

$\textbf{Method}$: Uses Stan-based MCMC for Bayesian inference.

$\textbf{Configuration}$: 250 warm-up iterations, 250 sampling iterations, with 2 chains running in parallel.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| label: Fit Options

ww_fit_opts <- set_fit_opts(
  model = model_stan_opts(package = "EpiSewer"),
  sampler = sampler_stan_mcmc(
    iter_warmup = 250,
    iter_sampling = 250,
    chains = 2,
    parallel_chains = 2,
    seed = 123
  )
)
```

# 12. Results Options and Episewer Run

Defines the 50% and 95% credibility intervals, with a total of 50 samples drawn for result evaluation.

Finally, the EpiSewer model is executed for the selected wastewater treatment plant with all previously defined components and settings.

The model employs Hamiltonian MCMC (via Stan), making it more computationally intensive to estimate latent variables. An alternative to `EpiSewer` for estimating the reproduction number is the `ern` package, which offers a more straightforward approach to estimating $R_t$ through simple deconvolution.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| cache: true
#| label: Run EpiSewer

ww_results_opts <- set_results_opts(
    fitted = TRUE,
    summary_intervals = c(0.5, 0.95),
    samples_ndraws = 50
  )

# Run EpiSewer for the WWTP
ww_result_rw <- EpiSewer(
    measurements = ww_measurements,
    sampling = ww_sampling,
    sewage = ww_sewage,
    shedding = ww_shedding,
    infections = ww_infections_rw,
    forecast = ww_forecast,
    fit_opts = ww_fit_opts,
    results_opts = ww_results_opts
  )

# ww_result_spline <- EpiSewer(
#     measurements = ww_measurements,
#     sampling = ww_sampling,
#     sewage = ww_sewage,
#     shedding = ww_shedding,
#     infections = ww_infections_spline,
#     forecast = ww_forecast,
#     fit_opts = ww_fit_opts,
#     results_opts = ww_results_opts
#   )
```

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: false
#| cache: true
#| label: Data Processing with log10

load("Data/synthetic_data")

burnin <- 15  # Interesting Variance behavior 
date_burnin <- synthetic_data %>% 
  dplyr::select(date) %>% 
  nth(burnin) %>%
  pull(date)

ts_data_log10 <- synthetic_data %>%
  dplyr::filter(date > date_burnin) %>%
  arrange(date)

# Change flow from to mL/day
ts_data_log10$flow <- ts_data_log10$flow*1000

# Remove the log10 transformation and change to mL/day
ts_data_log10$log10cpl <- log10((10^ts_data_log10$log10cpl)*1000)


# Change names to concentration
ts_data_log10 <- ts_data_log10 %>%
  mutate(concentration = log10cpl) %>%
  dplyr::select(-log10cpl)

wwtp_data_log10 <- ts_data_log10

# Convert filtered data to data.table
ww_data_log10 <- data.table::setDT(wwtp_data_log10)
  
# Select relevant columns and rename
ww_data_log10 <- ww_data_log10[, .(date, concentration, flow)]

# Calculate total viral load (Ï€t) based on concentration and flow
ww_data_log10[, total_viral_load := concentration * flow]

# Initialize 'cases' with NA values (if relevant)
ww_data_log10[sample(1:nrow(ww_data_log10), 0.1 * nrow(ww_data_log10)), cases := NA]

# Interpolate missing flow data using 'locf'
ww_data_log10 <- ww_data_log10[
    data.table::CJ(date = seq.Date(min(date), max(date), by = "day"), 
                   unique = TRUE), on = .(date)]

data.table::setnafill(ww_data_log10, type = "locf", cols = "flow")

# Remove duplicates based on date
ww_data_log10 <- ww_data_log10[!duplicated(date), ]

ww_sewer_log10 <- list(
    measurements = ww_data_log10[, .(date, concentration)],
    flows = ww_data_log10[, .(date, flow)],
    cases = ww_data_log10[, .(date, cases)]
  )

ww_measurements_log10 <- model_measurements(
    concentrations = concentrations_observe(
      measurements = ww_sewer_log10$measurements
      ),
    noise = noise_estimate(),
    LOD = LOD_none()
  )

ww_sewage_log10 <- model_sewage(
    flows = flows_observe(flows = ww_sewer_log10$flows),
    residence_dist = residence_dist_assume(residence_dist = c(1))
  )

ww_sampling <- model_sampling(
    sample_effects = sample_effects_none()
  )

ww_shedding <- model_shedding(
    shedding_dist = shedding_dist_assume(
      get_discrete_gamma(gamma_shape = 0.929639, 
                         gamma_scale = 7.241397, 
                         maxX = 30),
      shedding_reference = "symptom_onset"),
    incubation_dist = incubation_dist_assume(get_discrete_gamma(gamma_shape = 8.5, 
                                                                gamma_scale = 0.4, 
                                                                maxX = 10)),
    load_per_case = load_per_case_calibrate(cases = NULL, min_cases = 25), 
    load_variation = load_variation_estimate()
  )

ww_infections_rw <- model_infections(
  generation_dist = generation_dist_assume(
    get_discrete_gamma_shifted(gamma_mean = 3, 
                               gamma_sd = 2.4, 
                               maxX = 12)
    ),
  R = R_estimate_rw(),  # Use random walk instead of splines
  seeding = seeding_estimate_rw(),
  infection_noise = infection_noise_estimate()
)

ww_infections_spline <- model_infections(
  generation_dist = generation_dist_assume(
    get_discrete_gamma_shifted(gamma_mean = 3, 
                               gamma_sd = 2.4, 
                               maxX = 12)
    ),
  R = R_estimate_splines(),  # Use random walk instead of splines
  seeding = seeding_estimate_rw(),
  infection_noise = infection_noise_estimate()
)

ww_forecast <- model_forecast(
    horizon = horizon_assume(horizon = 7)
  )

ww_fit_opts <- set_fit_opts(
  model = model_stan_opts(package = "EpiSewer"),
  sampler = sampler_stan_mcmc(
    iter_warmup = 250,
    iter_sampling = 250,
    chains = 2,
    parallel_chains = 2,
    seed = 123
  )
)

ww_results_opts <- set_results_opts(
    fitted = TRUE,
    summary_intervals = c(0.5, 0.95),
    samples_ndraws = 50
  )

# Run EpiSewer for the WWTP

ww_result_log10_rw <- EpiSewer(
    measurements = ww_measurements_log10,
    sampling = ww_sampling,
    sewage = ww_sewage_log10,
    shedding = ww_shedding,
    infections = ww_infections_rw,
    forecast = ww_forecast,
    fit_opts = ww_fit_opts,
    results_opts = ww_results_opts
  )

# ww_result_log10_spline <- EpiSewer(
#     measurements = ww_measurements_log10,
#     sampling = ww_sampling,
#     sewage = ww_sewage_log10,
#     shedding = ww_shedding,
#     infections = ww_infections_spline,
#     forecast = ww_forecast,
#     fit_opts = ww_fit_opts,
#     results_opts = ww_results_opts
#   )
```

# 13. Results

## 13.1. Concentration Plots

The concentration plots illustrate the viral load in wastewater over time, both with and without normalization by flow. Normalizing the data reduces noise from daily flow fluctuations, offering a clearer perspective on viral load dynamics. We present both the original and log10-transformed concentration plots for comparison and include forecasts with a 7-day horizon to project viral load trends into the future.

The concentration plot for the original data shows distinct peaks, which may correspond to periods of heightened viral load in the community. The normalized concentration plot displays a smoother curve, helping to highlight trends over time. The log10-transformed concentration plot compresses the data range and minimizes the impact of large variations, making it easier to observe underlying patterns. In the normalized log10 concentration plot, periods of high viral load in the community remain detectable.

```{r}
#| results: asis
#| warning: true
#| echo: true
#| message: true
#| code-fold: true
#| outout: true
#| label: Concentration Plots

# Concentration plot
concentration_rw_plot <- plot_concentration(ww_result_rw, 
                                         measurements = ww_sewer$measurements, 
                                         flows = ww_sewer$flows, 
                                         normalized = FALSE) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Viral Concentration Over Time")

# Normalized Concentration plot
concentration_rw_norm_plot <- plot_concentration(ww_result_rw, 
                                             measurements=ww_sewer$measurements, 
                                             flows = ww_sewer$flows, 
                                             normalized = TRUE) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Normalized Viral Concentration Over Time")

# Log10 Concentration plot
concentration_rw_plot_log10 <- plot_concentration(ww_result_log10_rw, 
                                              measurements = ww_sewer_log10$measurements, 
                                              flows = ww_sewer_log10$flows, 
                                              normalized = FALSE) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Log10-Transformed Viral Concentration")

# Normalized Log10 Concentration plot
concentration_rw_norm_plot_log10 <- plot_concentration(ww_result_log10_rw, 
                                                  measurements = ww_sewer_log10$measurements, 
                                                  flows = ww_sewer_log10$flows, 
                                                  normalized = TRUE) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Log10-Transformed Normalized Viral Concentration")

# # Concentration plot for Spline
# concentration_spline_plot <- plot_concentration(ww_result_spline, 
#                                          measurements = ww_sewer$measurements, 
#                                          flows = ww_sewer$flows, 
#                                          normalized = FALSE) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Viral Concentration Over Time (Spline)")
# 
# # Normalized Concentration plot for Spline
# concentration_spline_norm_plot <- plot_concentration(ww_result_spline, 
#                                              measurements=ww_sewer$measurements, 
#                                              flows = ww_sewer$flows, 
#                                              normalized = TRUE) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Normalized Viral Concentration Over Time (Spline)")
# 
# # Log10 Concentration plot for Spline
# concentration_spline_plot_log10 <- plot_concentration(ww_result_log10_spline, 
#                                               measurements = ww_sewer_log10$measurements, 
#                                               flows = ww_sewer_log10$flows, 
#                                               normalized = FALSE) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Log10-Transformed Viral Concentration (Spline)")
# 
# # Normalized Log10 Concentration plot for Spline
# concentration_spline_norm_plot_log10 <- plot_concentration(ww_result_log10_spline, 
#                                                   measurements = ww_sewer_log10$measurements, 
#                                                   flows = ww_sewer_log10$flows, 
#                                                   normalized = TRUE) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Log10-Transformed Normalized Viral Concentration (Spline)")

# List of plots
concentration_plots_list <- list(concentration_rw_plot,
                                concentration_rw_norm_plot,
                                concentration_rw_plot_log10,
                                concentration_rw_norm_plot_log10#,
                                #concentration_spline_plot,
                                #concentration_spline_norm_plot,
                                #concentration_spline_plot_log10, 
                                #concentration_spline_norm_plot_log10
                                )

# Add names to the plots in the list
names(concentration_plots_list) <- c("Concentration", 
                                    "Normalized Concentration ",
                                    "Concentration (log10) ", 
                                    "Normalized Concentration (log10) " #, 
                                    # "Concentration Spline", 
                                    # "Normalized Concentration Spline",
                                    # "Concentration (log10) Spline", 
                                    # "Normalized Concentration (log10) Spline"
                                    )

```

::: panel-tabset
```{r}
#| results: asis
#| warning: false
#| echo: true
#| code-fold: true
#| message: false
#| label: Concentration Plots-tabs

# Display each plot with a section header
purrr::iwalk(concentration_plots_list, ~ {
   cat('##### ', .y, '\n\n')
  
   print(.x)
  
   cat('\n\n')
  
 })
```
:::

## 13.2. Effective Reproduction Number (Rt) Plot

The $R_t$ plot shows the estimated effective reproduction number over time based on the wastewater surveillance data. The $R_t$ values provide insights into the dynamics of the SARS-CoV-2 outbreak, indicating whether the virus is spreading, stable, or declining.

The $R_t$ plot shows fluctuations in the effective reproduction number over time, reflecting changes in the transmission dynamics of the virus. However, the forecast with a 7-day horizon provide implied that the outbreak is declining, with $R_t$ values below 1, indicating a decreasing trend in new infections.

In this analysis, we use a random walk to estimate $R_t$. However, other methods, such as spline, can also be used to estimate $R_t$ based on the data. Additionally, the results for the reproduction number using the log10-transformed data do not accurately reflect the outbreak dynamics, as they remain constant around a single value, failing to capture details in the transmission rate due to the logarithmic scale.


```{r}
#| results: asis
#| warning: true
#| echo: true
#| message: false
#| code-fold: true
#| outout: true
#| label: R_t Plots

# Effective Reproduction Number (Rt) for Random Walk
Rt_rw <- plot_R(ww_result_rw, forecast = TRUE) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  
      labs(title = "Estimated Effective Reproduction Number (Rt) Over Time",  
           x = "Date", y = "Effective Reproduction Number (Rt)") 

# # Effective Reproduction Number (Rt) for Spline
# Rt_spline <- plot_R(ww_result_spline, forecast = TRUE) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  
#       labs(title = "Estimated Effective Reproduction Number (Rt) Over Time (Spline)",  
#            x = "Date", y = "Effective Reproduction Number (Rt)") 

# List of Rt plots
Rt_plot_list <- list(Rt_rw) #, Rt_spline)

# Add names to the plots in the list
names(Rt_plot_list) <- c("Rt") #, "Rt Spline")
```

::: panel-tabset
```{r}
#| results: asis
#| warning: false
#| echo: false
#| message: false
#| label: R_t Plots-tabs
# Display each plot with a section header
purrr::iwalk(Rt_plot_list, ~ {
   cat('##### ', .y, '\n\n')
  
   print(.x)
  
   cat('\n\n')
})

```
:::

## 13.3. Viral Load and Infection Plots

We can analyze the total viral load and the log10-transformed total viral load over time to understand the dynamics of the virus in the wastewater system. The total viral load represents the cumulative viral particles present in the wastewater, reflecting the overall viral shedding in the community. Both follow a similar pattern to the concentration plots.

On the other hand, the infection plots show the estimated number of infections over time based on the wastewater surveillance data. Furthermore, we can see a clear similarity between the trends of load and infections, with the peaks of loads occurring a little earlier. This is interpreted as load being a delayed signal of infections. It should be noted that infections are used more as a diagnosis than as a prognosis.

```{r}
#| results: asis
#| warning: true
#| echo: true
#| message: true
#| code-fold: true
#| outout: true
#| label: Loads Plots

# Load Plots
Load_rw <- plot_load(ww_result_rw) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  # Fix overlapping dates
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate date labels
      labs(title = "Estimated Viral Load Over Time", 
           x = "Date", y = "Viral Load [gc/day]")

# Load_spline <- plot_load(ww_result_spline) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") + 
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Estimated Viral Load Over Time ", 
#            x = "Date", y = "Viral Load [gc/day]")

Load_log10_rw <- plot_load(ww_result_log10_rw) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Log10-Transformed Viral Load Over Time", 
           x = "Date", y = "Viral Load [gc/day]")

# Load_log10_spline <- plot_load(ww_result_log10_spline) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Log10-Transformed Viral Load Over Time ", 
#            x = "Date", y = "Viral Load [gc/day]")

Load_plot_list <- list(Load_rw,  Load_log10_rw) #, Load_spline, Load_log10_spline)

names(Load_plot_list) <- c("Total Load",  "Total Load Log10") #, "Load Spline", "Load Log10 Spline")
```

::: panel-tabset
```{r}
#| results: asis
#| warning: false
#| echo: false
#| message: false
#| label: Loads Plots-tabs

purrr::iwalk(Load_plot_list, ~ {
   cat('##### ', .y, '\n\n')
  
   print(.x)
  
   cat('\n\n')
  
 })
```
:::

```{r}
#| results: asis
#| warning: true
#| echo: true
#| message: true
#| code-fold: true
#| outout: true
#| label: Infection Plots

# Infection Plots
Infection_rw <- plot_infections(ww_result_rw) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Estimated Infections Over Time", 
           x = "Date", y = "Infections")

# Infection_spline <- plot_infections(ww_result_spline) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Estimated Infections Over Time (Spline)", 
#            x = "Date", y = "Infections")

Infection_log10_rw <- plot_infections(ww_result_log10_rw) +
      scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      labs(title = "Log10-Transformed Infections Over Time", 
           x = "Date", y = "Infections")

# Infection_log10_spline <- plot_infections(ww_result_log10_spline) +
#       scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +
#       theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#       labs(title = "Log10-Transformed Infections Over Time (Spline)", 
#            x = "Date", y = "Log10(Infections)")

Infection_plot_list <- list(Infection_rw,  
                            Infection_log10_rw) #, Infection_spline, Infection_log10_spline)

names(Infection_plot_list) <- c("Infection", 
                                "Infection Log10") #, "Infection Spline", "Infection Log10 Spline")

```

::: panel-tabset
```{r}
#| results: asis
#| warning: false
#| echo: false
#| message: false
#| label: Infection Plots-tabs

purrr::iwalk(Infection_plot_list, ~ {
   cat('##### ', .y, '\n\n')
  
   print(.x)
  
   cat('\n\n')
  
 })
```
:::

## 13.4. Diagnosicstic Summary

The diagnostic summary provides an overview of the MCMC sampling process, including the number of divergent transitions, maximum tree depth reached, and the Energy-Bayesian Fraction of Missing Information (E-BFMI). These metrics help assess the efficiency and reliability of the sampling process.

```{r}
#| results: asis
#| warning: false
#| echo: true
#| message: false
#| code-fold: true
#| outout: true
#| label: Diagnostic Summary


ww_result_rw$fitted$diagnostic_summary()
```


| Diagnostic                                                         | Description                                                                                                                                                                                                                                                   | Results                 | Interpretation                                                                                                                                            |

| `num_divergent`: Number of Divergent Transitions                   | Divergences indicate areas where the sampler failed to approximate the target distribution accurately, often due to issues with step size resolution.                                                                                                         | | Chain | Transitions | | No divergent transitions were detected in any of the chains, suggesting that the sampler did not encounter issues with the step size resolution.          |
|                                                                    |                                                                                                                                                                                                                                                               | |-------|-------------| |                                                                                                                                                           |
|                                                                    |                                                                                                                                                                                                                                                               | | 1     | 0           | |                                                                                                                                                           |
|                                                                    |                                                                                                                                                                                                                                                               | | 2     | 0           | |                                                                                                                                                           |

| `num_max_treedepth`: Number of Transitions Reaching Max Tree Depth | The metric indicates how often each chain reaches the maximum tree depth, suggesting that the NUTS sampler is terminating early to control time complexity.                                                                                                   | | Chain | Transitions | | No transitions reached the maximum tree depth in any of the chains, suggesting that the sampler was able to explore the target distributions efficiently. |
|                                                                    |                                                                                                                                                                                                                                                               | |-------|-------------| |                                                                                                                                                           |
|                                                                    |                                                                                                                                                                                                                                                               | | 1     | 0           | |                                                                                                                                                           |
|                                                                    |                                                                                                                                                                                                                                                               | | 2     | 0           | |                                                                                                                                                           |

| `ebfmi`: Energy-Bayesian Fraction of Missing Information           | The metric indicates the efficiency of the sampler in exploring the target distribution. Low values indicate that the sampler is moving inefficiently through the high-probability regions of the distribution, which can affect the quality of the sampling. | | Chain | Value  |      | All E-BFMI values are above 0.8, suggesting that the sampler explored the target distributions efficiently.                                               |
|                                                                    |                                                                                                                                                                                                                                                               | |-------|--------|      |                                                                                                                                                           |
|                                                                    |                                                                                                                                                                                                                                                               | | 1     | 0.986  |      |                                                                                                                                                           |
|                                                                    |                                                                                                                                                                                                                                                               | | 2     | 1.1549 |      |                                                                                                                                                           |


### References

- Adrian Lison. Adrian-lison/episewer: Episewer 0.0.1. v0.0.1, Zenodo, 25 Jan. 2024, doi:10.5281/zenodo.10569102.

- Lison, Adrian. EpiSewer. Version 0.0.3, 2024, https://adrian-lison.github.io/EpiSewer/index.html.

- Stan Development Team. CmdStan Userâ€™s Guide. Version 2.24, 2020, https://mc-stan.org/docs/2_24/cmdstan-guide-2_24.pdf.

- Champredon D, Papst I, Yusuf W (2024) ern: An R package to estimate the effective reproduction number using clinical and wastewater surveillance data. PLoS ONE 19(6): e0305550. https://doi.org/10.1371/journal.pone.0305550.



